

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.6.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'findbugs'

findbugs.toolVersion = '3.0.0'

bootJar {
    baseName = 'gs-producing-web-service'
    version =  '0.1.0'
    
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
compile 'com.google.code.findbugs:annotations:3.0.0'

}


sourceCompatibility = 1.8
targetCompatibility = 1.8




configurations {
    jaxb
}



sourceCompatibility = 1.8
targetCompatibility = 1.8




task genJaxb {
    ext.sourcesDir = "src/main/java/countries/countries"
    ext.classesDir = "${buildDir}/classes/java"
    ext.schema = "src/main/resources/countries.xsd"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir, schema: schema) {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}


bootJar {
    baseName = 'gs-producing-web-service'
    version =  '0.1.0'
    from genJaxb.classesDir
}


dependencies {
    compile("org.springframework.boot:spring-boot-starter-web-services")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    compile("wsdl4j:wsdl4j:1.6.1")
 compile('org.springframework.boot:spring-boot-starter-data-jpa')
   //compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.1.3.RELEASE'
compile group: 'javax.persistence', name: 'javax.persistence-api', version: '2.2'

jaxb 'com.sun.xml.bind:jaxb-xjc:2.2.4'
  jaxb 'com.sun.xml.bind:jaxb-impl:2.2.4'
   jaxb 'javax.xml.bind:jaxb-api:2.2.4'  


   runtime('mysql:mysql-connector-java')
    compile(files(genJaxb.classesDir).builtBy(genJaxb))
}
